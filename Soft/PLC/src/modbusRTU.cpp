

#include "modbusRTU.h"
#include "arduino.h"
#include "mbPort.h"
#include "cells.h"

uint16_t * MB_Reg[MB_SIZE];
cModbus modbus;


uint8_t cModbus::modbus(void)
{
  return 0;
}

void cModbus::begin(HardwareSerial port, uint16_t boudRate )
{
  port.begin(boudRate);
  port.EventEndTransmit = callbackUart2Tx;
  port.EventReceive = callbackUart2Rx;
}

void cModbus::task()
{
  uint8_t adress =1;
  struct sFrame * pFrame = getReadyToMbBuffer();
  if (pFrame)
  {
      if(pFrame->buffer[0] == adress )
      {
        if( !(this->CRC16(pFrame->buffer, pFrame->len)))
          {
            switch(pFrame->buffer[1])
            {
              case 0x01:{	this->MB_0x01(pFrame);  	break;	}
              case 0x02:{	this->MB_0x02(pFrame);  	break;	}
              case 0x03:{ this->MB_0x03(pFrame);  	break;	}
              case 0x04:{ this->MB_0x04(pFrame);  	break;	}
              case 0x05:{ this->MB_0x05(pFrame);  	break;	}
              case 0x06:{	this->MB_0x06(pFrame);  	break;	}
              case 0x07:{ this->MB_0x07(pFrame);  	break;	}
              case 0x08:{ this->MB_0x08(pFrame);  	break;	}
              case 0x0B:{ this->MB_0x0B(pFrame);  	break;	}
              case 0x0C:{ this->MB_0x0C(pFrame);  	break;	}
              case 0x0F:{ this->MB_0x0F(pFrame);  	break;	}
              case 0x10:{	this->MB_0x10(pFrame);	  break;	}
              case 0x11:{ this->MB_0x11(pFrame);  	break;	}
              case 0x14:{ this->MB_0x14(pFrame);  	break;	}
              case 0x15:{ this->MB_0x15(pFrame);  	break;	}
              case 0x16:{ this->MB_0x16(pFrame);  	break;	}
              case 0x17:{	this->MB_0x17(pFrame);	  break;	}
              case 0x18:{ this->MB_0x18(pFrame);  	break;	}
            }
            uint16_t CRC    = CRC16(pFrame->buffer, pFrame->len);
    				pFrame->buffer[pFrame->len] = (uint8_t) CRC & 0xFF;
    				pFrame->buffer[pFrame->len+1] = (uint8_t) (CRC >> 8) & 0xFF;
    				pFrame->len += 2;
    				pFrame->status = pFrame->eStatus::readyToPort ;
          }
          else
          pFrame->len = 0;
      }
  }
}
////////////////////////////////////////////////////////
// Описание ModBus Функций
//
//
////////////////////////////////////////////////////////
void cModbus::MB_0x01 (struct sFrame * pBuffer)
{
	uint16_t address;
	uint16_t count_reg;
	struct sCellBool * pCell_b;
	pCell_b = Cell_b_get_ptr();
	address   = ( (int)pBuffer->buffer[2] << 8) | pBuffer->buffer[3];
	count_reg = ( (int)pBuffer->buffer[4] << 8) | pBuffer->buffer[5];
	if (((address + count_reg) <= MAX_CELL_BOOL) && ((count_reg/8 * 2) <= (MB_BUFFER_SIZE - 8)))
	{
		uint16_t i;
		if ( (count_reg -(count_reg / 8)*8) == 0 )
			pBuffer->buffer[2] = (unsigned char) count_reg / 8 ;
		else
			pBuffer->buffer[2] = (unsigned char) count_reg / 8 + 1;
		for (i = 0; i < pBuffer->buffer[2] ; i++)
		{
			pBuffer->buffer[3 + i] = 0;
		}

		for (i = 0; i < count_reg ; i++)
		{
			pBuffer->buffer[3 + i/8] =  pBuffer->buffer[3 + i/8] | ((address + i + pCell_b)->var) << (i - (i/8)*8);
		}
		pBuffer->len = 3 + pBuffer->buffer[2];
	}
	else
	{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
	}
}

void cModbus::MB_0x02 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x03 (struct sFrame * pBuffer)
{
	uint16_t address;
	uint16_t count_reg;
	struct sCellAna * pCell_a;
	pCell_a = Cell_a_get_ptr();
	address   = ( (int)pBuffer->buffer[2] << 8) | pBuffer->buffer[3];
	count_reg = ( (int)pBuffer->buffer[4] << 8) | pBuffer->buffer[5];
	if (
		(
		 ((address + count_reg) <=  MAX_CELL_ANA)||
		 (
		  ((address + count_reg) <=  MB_SIZE + 1000)&&
		  (address >=1000)
		 )
		) &&
		((count_reg * 2) <= (MB_BUFFER_SIZE - 8))
	   )
	{
		uint16_t i;
		pBuffer->buffer[2] = (char) count_reg * 2;
		for (i = 0; i < count_reg * 2; i++)
		{
			if (address >= 1000 )
				pBuffer->buffer[3 + i] = *(MB_Reg[(address - 1000)*2 + i]);
			else
				if (i%2)
					pBuffer->buffer[3 + i] = (unsigned char)(((address  + i/2 + pCell_a) -> var ) & 0xFF);
				else
					pBuffer->buffer[3 + i] = (unsigned char)((((address  + i/2 + pCell_a) -> var ) & 0xFF00)>>8) ;
		}
		pBuffer->len = 3 + count_reg * 2;
	}
	else
	{
		pBuffer->buffer[1] = 0x83;
		if ((address + count_reg) <= MB_SIZE)
			pBuffer->buffer[2] = 0x02;
		else
			pBuffer->buffer[2] = 0x03;
		pBuffer->len = 3;
	}
}

void cModbus::MB_0x04 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x05 (struct sFrame * pBuffer)
{
	int address;
	struct sCellBool * pCell_b;
	pCell_b = Cell_b_get_ptr();
	address   = ( (int)pBuffer->buffer[2] << 8) | pBuffer->buffer[3];
	if ((address  <= MAX_CELL_BOOL) )
	{

		(address + pCell_b) -> var  = pBuffer->buffer[4] == 0xFF ;

		pBuffer->len = 6;
	}
	else
	{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
	}
}
void cModbus::MB_0x06 (struct sFrame * pBuffer)
{
	int address;
	struct sCellAna * pCell_a;
	pCell_a = Cell_a_get_ptr();
	address   = ( (int)pBuffer->buffer[2] << 8) | pBuffer->buffer[3];
	if (

		 ((address) <=  MAX_CELL_ANA)||
		 (
		  ((address) <=  MB_SIZE + 1000)&&
		  (address >=1000)
		 )

	   )
	{
		if (address >= 1000 )
		{
			*(MB_Reg[(address - 1000)*2]) =	 pBuffer->buffer[4] ;
			*(MB_Reg[(address - 1000)*2+1]) = pBuffer->buffer[5];
		}
		else
			(address + pCell_a) -> var  = pBuffer->buffer[5] | pBuffer->buffer[4] << 8;;

		pBuffer->len = 6;
	}
	else
	{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
	}
}
void cModbus::MB_0x07 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x08 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x0B (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x0C (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}

void cModbus::MB_0x0F (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}

void cModbus::MB_0x10 (struct sFrame * pBuffer)
{
	int address, i;
	int count_reg;
	struct sCellAna * pCell_a;
	pCell_a = Cell_a_get_ptr();
	address   = ( (int)pBuffer->buffer[2] << 8) | pBuffer->buffer[3];
	count_reg = ( (int)pBuffer->buffer[4] << 8) | pBuffer->buffer[5];
	if (

		 ((address + count_reg) <=  MAX_CELL_ANA)||
		 (
		  ((address + count_reg * 2) <=  MB_SIZE + 1000)&&
		  (address >=1000)
		 )

	   )
	{
		if (address >= 1000 )
		{
			for (i = 0; i < count_reg; i++)
			{
				*(MB_Reg[(address - 1000)* 2 + (i * 2)]) =	 pBuffer->buffer[7 + i*2] ;
				*(MB_Reg[(address - 1000)* 2 + 1 + (i * 2)]) = pBuffer->buffer[8 + i*2];
			}
		}
		else
			for (i = 0; i < count_reg; i++)
				(address + i + pCell_a) -> var  = pBuffer->buffer[8 + i * 2] | pBuffer->buffer[7 + i * 2] << 8;;

		pBuffer->buffer[4] = 0;
		pBuffer->buffer[5] = count_reg;
		pBuffer->len = 6;
	}

	else
	{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
	}

}
void cModbus::MB_0x11 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x14 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x15 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;

}
void cModbus::MB_0x16 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
}
void cModbus::MB_0x17 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
}
void cModbus::MB_0x18 (struct sFrame * pBuffer)
{
		pBuffer->buffer[1] = 0x81;
		pBuffer->buffer[2] = 0x01;
		pBuffer->len = 3;
}




//Расчет CRC16
uint16_t cModbus::CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
const uint8_t auchCRCHi[] = {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
		0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40
	} ;
const uint8_t auchCRCLo[] = {
		0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
		0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
		0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
		0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
		0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
		0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
		0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
		0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
		0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
		0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
		0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
		0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
		0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
		0x40	};



		uint8_t uIndex;
		uint8_t uchCRCHi = 0xFF;
		uint8_t uchCRCLo = 0xFF;

		while (usDataLen--)
		{
			uIndex = uchCRCLo ^ *puchMsg++;
 			uchCRCLo = uchCRCHi  ^ auchCRCHi[uIndex];
			uchCRCHi = auchCRCLo[uIndex] ;
 		}
		return ((uchCRCHi * 0x100 )| uchCRCLo);
	}
